services:
  postgres:
    image: postgres:15-alpine
    container_name: travel_agency_postgres
    restart: always
    environment:
      POSTGRES_DB: travel_agency_db
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h postgres" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  flyway:
    image: flyway/flyway
    container_name: flyway_migrations
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - MIGRATION_VERSION=${MIGRATION_VERSION:-latest}
    command: >
      -url=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      -user=${POSTGRES_USER}
      -password=${POSTGRES_PASSWORD}
      -connectRetries=10
      -locations=filesystem:/flyway/sql
      -baselineOnMigrate=true
      -target=${MIGRATION_VERSION}
      migrate &&
    volumes:
      - ./migrations/flyway/sql:/flyway/sql
    healthcheck:
      test: [ "CMD", "flyway", "info" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  seeding:
    container_name: seeder
    build:
      context: .
      dockerfile: docker/seeder/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      flyway:
        condition: service_completed_successfully
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SEED_COUNT: ${SEED_COUNT:-100}
      APP_ENV: ${APP_ENV}
    command: [ "sh", "-c", 'if [ "$APP_ENV" = "dev" ]; then ./seeder; fi' ]


volumes:
  postgres_data: